# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                                       controllers.Application.index()
POST        /                                                       controllers.Application.authenticate()
GET         /home                                                   controllers.Application.home()
GET         /select-experiment                                      controllers.Application.selectExperiment()
GET         /about                                                  controllers.Application.about()
GET         /trial                                                  controllers.Application.chooseTrial(exp_type : String)
GET         /logout                                                 controllers.Application.logout()

GET         /check-repeat-user                                      controllers.Application.checkUserTakeRepeatExperiment(trial_id:Long, exp_id:Long)
GET         /back-form-trial                                        controllers.Application.checkBackFormTrial(exp_type:String)


GET         /result                                                 controllers.Application.showResult()
GET         /findExperiment                                         controllers.Application.findExpResult(exp_type : String)

GET         /muller-layer                                           controllers.MullerLayer.info()
GET         /muller-layer/info                                      controllers.MullerLayer.infoIframe()
GET         /muller-layer/proc                                      controllers.MullerLayer.proc()
GET         /muller-layer/proci                                     controllers.MullerLayer.procIframe()
GET         /muller-layer/demo                                      controllers.MullerLayer.demoPage()
POST        /muller-layer/reportDemo                                controllers.MullerLayer.demoReport()
GET         /muller-layer/experiment                                controllers.MullerLayer.experiment(trialId:Long,questionNo:Int, isPreview:Boolean)
POST        /muller-layer/experiment/save                           controllers.MullerLayer.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /muller-layer/report                                    controllers.MullerLayer.report(username:String ?="", trial_id:Long ?=0, isPreview:Boolean)
GET         /muller-layer/findQuestion                              controllers.MullerLayer.findQuestion(trialId: Long, questionNo: Int)
GET         /muller-layer/preview                                   controllers.MullerLayer.preview(trialId:Long)

GET         /brown-peterson                                         controllers.BrownPeterson.info()
GET         /brown-peterson/info                                    controllers.BrownPeterson.infoIframe()
GET         /brown-peterson/proc                                    controllers.BrownPeterson.proc()
GET         /brown-peterson/proci                                   controllers.BrownPeterson.procIframe()
GET         /brown-peterson/demo                                    controllers.BrownPeterson.demoPage()
POST        /brown-peterson/reportDemo                              controllers.BrownPeterson.reportDemo(first:String,second:String,third:String)
GET         /brown-peterson/experiment                              controllers.BrownPeterson.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /brown-peterson/experiment/save                         controllers.BrownPeterson.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /brown-peterson/report                                  controllers.BrownPeterson.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /brown-peterson/preview                                 controllers.BrownPeterson.preview(trialId:Long)

GET         /attention-blink                                        controllers.AttentionBlink.info()
GET         /attention-blink/info                                   controllers.AttentionBlink.infoIframe()
GET         /attention-blink/proc                                   controllers.AttentionBlink.proc()
GET         /attention-blink/proci                                  controllers.AttentionBlink.procIframe()
GET         /attention-blink/demo                                   controllers.AttentionBlink.demoPage()
POST        /attention-blink/reportDemo                             controllers.AttentionBlink.demoReport()
GET         /attention-blink/experiment                             controllers.AttentionBlink.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /attention-blink/experiment/save                        controllers.AttentionBlink.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /attention-blink/report                                 controllers.AttentionBlink.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /attention-blink/preview                             	controllers.AttentionBlink.preview(trialId:Long)


GET         /stroop_effect                                          controllers.StroopEffect.info()
GET         /stroop_effect/info                                     controllers.StroopEffect.infoIframe()
GET         /stroop_effect/proc                                     controllers.StroopEffect.proc()
GET         /stroop_effect/proci                                    controllers.StroopEffect.procIframe()
GET         /stroop_effect/demo                                     controllers.StroopEffect.demoPage()
POST        /stroop_effect/reportDemo                               controllers.StroopEffect.demoReport()
#GET     /stroop_effect/repeatexp	controllers.StroopEffect.checkUserTakeRepeatExperiment()

GET         /stroop_effect/experiment                               controllers.StroopEffect.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /stroop_effect/experiment/save                          controllers.StroopEffect.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /stroop-effect/report                                   controllers.StroopEffect.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /stroop-effect/preview                                   controllers.StroopEffect.preview(trialId:Long)

GET         /sternberg_search                                       controllers.SternbergSearch.info()
GET         /sternberg_search/info                                  controllers.SternbergSearch.infoIframe()
GET         /sternberg_search/proc                                  controllers.SternbergSearch.proc()
GET         /sternberg_search/proci                                 controllers.SternbergSearch.procIframe()
GET         /sternberg_search/experiment                            controllers.SternbergSearch.experiment(trialId:Long, questionNo:Int,isShowQuestion:Boolean, isPreview:Boolean)
POST        /sternberg_search/experiment/save                       controllers.SternbergSearch.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /sternberg_search/report                                controllers.SternbergSearch.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /sternberg_search/demo                                  controllers.SternbergSearch.demoPage()
POST        /sternberg_search/reportDemo                            controllers.SternbergSearch.demoReport()
GET         /sternberg_search/preview                               controllers.SternbergSearch.preview(trialId:Long)

GET         /signal_detection                                       controllers.SignalDetection.info()
GET         /signal_detection/info                                  controllers.SignalDetection.infoIframe()
GET         /signal_detection/proc                                  controllers.SignalDetection.proc()
GET         /signal_detection/proci                                 controllers.SignalDetection.procIframe()
GET         /signal_detection/demo                                  controllers.SignalDetection.demoPage()
POST        /signal_detection/reportDemo                            controllers.SignalDetection.reportDemo()
GET         /signal_detection/experiment                            controllers.SignalDetection.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /signal_detection/experiment/save                       controllers.SignalDetection.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /signal_detection/report                                controllers.SignalDetection.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /signal_detection/preview                               controllers.SignalDetection.preview(trialId:Long)

GET         /simon_effect                                           controllers.SimonEffect.info()
GET         /simon_effect/info                                      controllers.SimonEffect.infoIframe()
GET         /simon_effect/proc                                      controllers.SimonEffect.proc()
GET         /simon_effect/proci                                     controllers.SimonEffect.procIframe()
GET         /simon_effect/demo                                      controllers.SimonEffect.demoPage()
POST        /simon_effect/reportDemo                                controllers.SimonEffect.reportDemo()
GET         /simon_effect/experiment_inst                           controllers.SimonEffect.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /simon_effect/experiment                                controllers.SimonEffect.doExperiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /simon_effect/experiment/save                           controllers.SimonEffect.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /simon_effect/report                                    controllers.SimonEffect.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /simon_effect/preview                                   controllers.SimonEffect.preview(trialId:Long)

GET         /magic_number7                                          controllers.MagicNumber7.info()
GET         /magic_number7/info                                     controllers.MagicNumber7.infoIframe()
GET         /magic_number7/proc                                     controllers.MagicNumber7.proc()
GET         /magic_number7/proci                                    controllers.MagicNumber7.procIframe()
GET         /magic_number7/demo                                     controllers.MagicNumber7.demoPage()
POST        /magic_number7/reportDemo                               controllers.MagicNumber7.demoReport(length:Int)
GET         /magic_number7/experiment                               controllers.MagicNumber7.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /magic_number7/experiment/save                          controllers.MagicNumber7.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /magic_number7/report                                   controllers.MagicNumber7.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /magic_number7/preview                                  controllers.MagicNumber7.preview(trialId:Long)

GET         /garner_interference                                    controllers.GarnerInterference.info()
GET         /garner_interference/info                               controllers.GarnerInterference.infoIframe()
GET         /garner_interference/proc                               controllers.GarnerInterference.proc()
GET         /garner_interference/procIframe                         controllers.GarnerInterference.procIframe()
GET         /garner_interference/demo                               controllers.GarnerInterference.demoPage()
POST        /garner_interference/reportDemo                         controllers.GarnerInterference.demoReport()
GET         /garner_interference/experiment                         controllers.GarnerInterference.experiment(trialId:Long , questionNo:Int, isPreview:Boolean)
POST        /garner_interference/experiment/save                    controllers.GarnerInterference.saveAnswer(trialId:Long , questionNo:Int, isPreview:Boolean)
GET         /garner_interference/report                             controllers.GarnerInterference.report(username:String ?="",trial_id:Long ?=0, isPreview:Boolean)
GET         /garner_interference/preview                            controllers.GarnerInterference.preview(trialId:Long)

GET         /positionError                                          controllers.PositionError.info()
GET         /positionError/info                                     controllers.PositionError.infoIframe()
GET         /positionError/proc                                     controllers.PositionError.proc()
GET         /positionError/proci                                    controllers.PositionError.procIframe()
GET         /positionError/demo                                     controllers.PositionError.demoPage()
POST        /positionError/reportDemo                               controllers.PositionError.demoReport()
GET         /positionError/experiment                               controllers.PositionError.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /positionError/experiment/save                          controllers.PositionError.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /positionError/report                                   controllers.PositionError.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /positionError/preview                                  controllers.PositionError.preview(trialId:Long)

GET         /visualSearch                                           controllers.VisualSearch.info()
GET         /visualSearch/info                                      controllers.VisualSearch.infoIframe()
GET         /visualSearch/proc                                      controllers.VisualSearch.proc()
GET         /visualSearch/proci                                     controllers.VisualSearch.procIframe()
GET         /visualSearch/demo                                      controllers.VisualSearch.demoPage()
POST        /visualSearch/reportDemo                                controllers.VisualSearch.demoReport()
GET         /visualSearch/experiment                                controllers.VisualSearch.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /visualSearch/experiment/save                           controllers.VisualSearch.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /visualSearch/report                                    controllers.VisualSearch.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /visualSearch/init                                      controllers.VisualSearch.init(trialId:Long)
GET         /visualSearch/preview                                   controllers.VisualSearch.preview(trialId:Long)

GET         /changeBlindness                                        controllers.ChangeBlindness.info()
GET         /changeBlindness/info                                   controllers.ChangeBlindness.infoIframe()
GET         /changeBlindness/proc                                   controllers.ChangeBlindness.proc()
GET         /changeBlindness/proci                                  controllers.ChangeBlindness.procIframe()
GET         /changeBlindness/demo                                   controllers.ChangeBlindness.demoPage()
POST        /changeBlindness/reportDemo                             controllers.ChangeBlindness.demoReport()
GET         /changeBlindness/experiment_inst                        controllers.ChangeBlindness.experiment(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /changeBlindness/experiment                             controllers.ChangeBlindness.doExperiment(trialId:Long, questionNo:Int, isPreview:Boolean)
POST        /changeBlindness/experiment/save                        controllers.ChangeBlindness.saveAnswer(trialId:Long, questionNo:Int, isPreview:Boolean)
GET         /changeBlindness/report                                 controllers.ChangeBlindness.report(username:String ?= "", trial_id:Long ?= 0, isPreview:Boolean)
GET         /changeBlindness/preview                                controllers.ChangeBlindness.preview(trialId:Long)

GET         /user                                                   controllers.UserController.editProfile()
POST        /user                                                   controllers.UserController.saveUserProfile()
GET         /user/changepassword                                    controllers.UserController.changeUserPassword()
POST        /user/changepassword                                    controllers.UserController.saveUserPassword()

GET         /admin                                                  controllers.Admin.index()
GET         /admin/findResult                                       controllers.Admin.RenderAdminFindResult()
POST        /admin/findResult                                       controllers.Admin.RenderAdminFindResultPost()
GET         /admin/experiment                                       controllers.Admin.displayExperimentList()
GET         /admin/experimentResult                                 controllers.Admin.RenderAdminExperimentResult()
GET         /admin/experiment/add                                   controllers.Admin.addExperiment()

GET         /admin/experiment/find                                  controllers.Admin.findExperiment()
POST        /admin/experiment                                       controllers.Admin.saveExperiment(mode : Integer)
GET         /admin/experiment/result/:id                            controllers.Admin.displayExperimentResult(id : Long)

POST        /userInfo                                               controllers.Admin.saveUser(mode : Integer)
GET         /userInfo                                               controllers.Admin.renderUserInfo()
GET         /addUser                                                controllers.Admin.addUser(userNames : String)
GET         /editUser                                               controllers.Admin.editUser(userName : String)
GET         /admin/experiment/parameter                             controllers.Admin.displayParameter(id:Long)
POST        /admin/experiment/parameter/brownPeterson               controllers.Admin.saveBrownPetersonParameter(id:Long)
GET         /admin/experiment/brown-peterson/question               controllers.Admin.displayBrownPetersonQuestionList(id:Long)
GET         /admin/experiment/brown-peterson/question/add           controllers.Admin.addBrownPetersonQuestion(expId: Long)
POST        /admin/experiment/brown-peterson/question/save          controllers.Admin.saveBrownPetersonQuestion(expId: Long)
GET         /admin/experiment/brown-peterson/question/random        controllers.Admin.randomBrownPetersonQuestion(exp_id : Long, quiz_id : Long)
GET         /admin/experiment/stroof-effect/question/change         controllers.Admin.switchStroopEffectQuestion(exp_id : Long, quiz_id : Long)
POST        /admin/experiment/parameter/stroopEffect                controllers.Admin.saveStroopEffectParameter(exp_id : Long)
POST        /admin/experiment/parameter/attention-blink             controllers.Admin.saveAttentionBlinkParameter(exp_id : Long)
POST        /admin/experiment/parameter/signal-detection            controllers.Admin.saveSignalDetectionParameter(exp_id : Long)
POST        /admin/experiment/parameter/simon-effect                controllers.Admin.saveSimonEffectParameter(exp_id : Long)

GET         /initial                                                controllers.InitialController.index()
GET         /initial/AttentionBlink                                 controllers.StroopEffect.installQuestion()
GET         /initial/BrownPeterson                                  controllers.BrownPeterson.installQuestion()

GET         /admin/experiment/init                                  controllers.RequestController.init(exp_id : Long)
POST        /admin/experiment/saveVisualSearch                      controllers.RequestController.saveVisualSearch(trialId : Long , circleGreen : Integer, circleRed : Integer, circleBlue: Integer,squareBlue : Integer, squareRed : Integer, squareGreen: Integer, positionXofTarget : Double, positionYofTarget:Double, frameSize : String, target : String)
GET         /admin/experiment/mullerInit                            controllers.MullerLayer.initial(expId: Long)
GET         /admin/experiment/changeBlindnessInit                   controllers.ChangeBlindness.initial(expId: Long)
GET         /admin/experiment/attentionBlinkInit                   controllers.AttentionBlink.initial(expId: Long)
GET         /admin/experiment/brownPetersonInit                     controllers.BrownPeterson.initial(expId: Long)
GET         /admin/experiment/MagicSevenInit                        controllers.MagicNumber7.initial(expId: Long)
GET         /admin/experiment/PositionErrorInit                        controllers.PositionError.initial(expId: Long)
GET         /admin/experiment/sternbergInit                        controllers.SternbergSearch.initial(expId: Long)
GET         /admin/experiment/stroofEffectInit                        controllers.StroopEffect.initial(expId: Long)
GET         /admin/experiment/SimonEffectInit                        controllers.SimonEffect.initial(expId: Long)
GET         /admin/experiment/signalDetectionInit                    controllers.SignalDetection.initial(expId: Long)
PUT         /admin/experiment/saveMullerTrial                       controllers.MullerLayer.saveAdmin()
PUT         /admin/experiment/saveGarnerTrials                      controllers.GarnerInterference.saveTrials()
PUT         /admin/experiment/saveChangeBlindnessTrials             controllers.ChangeBlindness.saveTrials()
PUT         /admin/experiment/saveAttentionBlinkTrials             controllers.AttentionBlink.saveTrials()
PUT         /admin/experiment/saveBrownPetersonTrials             controllers.BrownPeterson.saveTrials()
PUT         /admin/experiment/saveMagicSevenTrials              controllers.MagicNumber7.saveTrials()
PUT         /admin/experiment/savePositionErrorTrials              controllers.PositionError.saveTrials()
PUT         /admin/experiment/saveSternBergTrials              controllers.SternbergSearch.saveTrials()
PUT         /admin/experiment/saveStroofEffectTrials              controllers.StroopEffect.saveTrials()
PUT         /admin/experiment/saveSimonEffectTrials              controllers.SimonEffect.saveTrials()
PUT         /admin/experiment/saveSignalDetectionTrials              controllers.SignalDetection.saveTrials()
GET         /admin/experiment/brown-peterson/brownPetersonQuestion  controllers.BrownPeterson.findAllQuestions()
DELETE         /admin/experiment/brown-peterson/brownPetersonDeleteQuestion  controllers.BrownPeterson.deleteQuestion(id:Long)
POST         /admin/experiment/brown-peterson/brownPetersonDeleteQuestions  controllers.BrownPeterson.deleteQuestions()

GET         /report/download                                    controllers.ExportController.downloadPage()
GET         /report/download/brown-peterson-trial              controllers.ExportController.downloadBrownPetersonTrial()
GET         /report/download/brown-peterson-quiz              controllers.ExportController.downloadBrownPetersonQuiz()
GET         /report/download/brown-peterson-question              controllers.ExportController.downloadBrownPetersonQuestion()
GET         /report/download/brown-peterson-answer              controllers.ExportController.downloadBrownPetersonAnswer()


GET         /admin/experiment/garnerInit                            controllers.GarnerInterference.initial(expId: Long)
PUT         /admin/experiment/saveExperiment                            controllers.Application.saveExperiment(id: Long, name: String, startDate: Long, expireDate: Long)

# Map Bootstrap images
GET         /assets/fonts/glyphicons-halflings-regular.woff         controllers.Assets.at(path="/public", file="/stylesheets/fonts/glyphicons-halflings-regular.woff")
GET         /assets/fonts/glyphicons-halflings-regular.eot          controllers.Assets.at(path="/public", file="/stylesheets/fonts/glyphicons-halflings-regular.eot")
GET         /assets/fonts/glyphicons-halflings-regular.ttf          controllers.Assets.at(path="/public", file="/stylesheets/fonts/glyphicons-halflings-regular.ttf")
GET         /assets/fonts/glyphicons-halflings-regular.svg          controllers.Assets.at(path="/public", file="/stylesheets/fonts/glyphicons-halflings-regular.svg")
GET         /assets/fonts/lato/lato-regular-webfont.woff            controllers.Assets.at(path="/public", file="/fonts/Lato/lato-regular-webfont.woff")
GET         /assets/fonts/lato/lato-bold-webfont.woff               controllers.Assets.at(path="/public", file="/fonts/Lato/lato-regular-webfont.woff")
GET         /assets/fonts/lato/lato-bold-webfont.ttf                controllers.Assets.at(path="/public", file="/fonts/Lato/lato-bold-webfont.ttf")
GET         /assets/fonts/lato/lato-regular-webfont.ttf             controllers.Assets.at(path="/public", file="/fonts/Lato/lato-regular-webfont.ttf")
GET         /assets/fonts/lato/lato-bold-webfont.svg                controllers.Assets.at(path="/public", file="/fonts/Lato/lato-bold-webfont.svg")
GET         /assets/fonts/lato/lato-regular-webfont.svg             controllers.Assets.at(path="/public", file="/fonts/Lato/lato-regular-webfont.svg")
# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                           controllers.Assets.at(path="/public", file)
